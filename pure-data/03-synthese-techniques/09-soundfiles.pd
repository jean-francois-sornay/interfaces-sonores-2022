#N canvas 0 23 1123 642 12;
#X obj 50 106 openpanel;
#X obj 50 61 bng 30 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X obj 50 158 soundfiler;
#X msg 117 181 \$1;
#X obj 50 252 s \$0-nsamples;
#X obj 117 205 * 0.001;
#X obj 117 229 s \$0-filemsr;
#X msg 50 132 read -resize \$1 simple-sample;
#X obj 50 288 array define simple-sample;
#X msg 361 261 0 \, \$1 \$2;
#X obj 451 360 line~;
#X obj 361 183 pack f f;
#X obj 361 56 f;
#X obj 388 28 r \$0-nsamples;
#X obj 361 28 bng 15 250 50 0 empty empty play -30 7 0 11 #fcfcfc #000000
#000000;
#X obj 69 350 r \$0-filemsr;
#X obj 51 327 r \$0-nsamples;
#X obj 51 374 /;
#X obj 51 399 s \$0-msduration;
#X obj 414 56 r \$0-msduration;
#X obj 361 548 *~;
#X obj 388 522 line~;
#X msg 388 499 \$1 10;
#X obj 391 480 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 0;
#X msg 563 261 \$1 \, 0 \$2;
#X obj 563 236 spigot;
#X obj 361 236 spigot 1;
#X obj 570 61 tgl 15 0 empty empty reverse 17 7 0 11 #fcfcfc #000000
#000000 0 1;
#X obj 570 159 t f f;
#X obj 570 183 == 0;
#X obj 337 583 dac~ 1 2;
#X msg 413 360 0;
#X obj 428 131 t b f;
#X floatatom 428 84 5 0 0 1 transposition - - 0;
#X obj 428 107 expr pow(2 \, $f1/12);
#X obj 414 159 /;
#X obj 537 548 *~;
#X obj 564 522 line~;
#X msg 564 499 \$1 10;
#X obj 567 480 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 0;
#X obj 513 583 dac~ 1 2;
#X obj 361 455 tabread~ simple-sample;
#X obj 537 454 tabread4~ simple-sample;
#X text 670 148 différents algorithmes d'interpolation existent \,
le plus simple étant l'interpolation linéaire qui ne donne pas d'excellents
résultats.;
#X text 670 204 Pure Data utilise un algorithme d'interpolation cubique
\, assez critiqué mais donnant au final un résultat très acceptable
(le code se trouve dans la fonction tabread4_tilde_perform du fichier
source d_array.c du code source de Pure Data).;
#X text 375 359 stop;
#X text 86 73 dans le tableau simple-sample;
#X text 86 59 chargement d'un fichier son;
#X text 669 23 le principe de l'interpolation est d'estimer une valeur
qui n'existe pas dans un signal car elle se trouve entre deux échantillons
et n'a pas été enregistrée lors de la numérisation du signal. dans
le cas d'une table d'onde on peut minimiser le problème en "suréchantillonnant"
le signal car celui-ci est généré de manière procédurale \, mais
dans le cas d'un son enregistré on ne peut qu'essayer de deviner les
valeurs entre les échantillons.;
#X text 671 287 la plupart des autres algorithmes existants sont basés
sur des polynômes dont on essaie d'estimer les coefficients afin de
les faire passer par les n points précédant la valeur à calculer
et par les n points la suivant. l'interpolation cubique est similaire
dans le sens où l'on calcule les valeurs en se basant sur les 2 points
précédents et les 2 points suivants (d'où le suffixe "4" dans les
objets utilisant cette technique \, pour "4-point interpolation");
#X text 712 454 < avec interpolation;
#X text 113 455 sans interpolation (drop-sample) >;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 1 3 0;
#X connect 3 0 5 0;
#X connect 5 0 6 0;
#X connect 7 0 2 0;
#X connect 9 0 10 0;
#X connect 10 0 41 0;
#X connect 10 0 42 0;
#X connect 11 0 26 0;
#X connect 11 0 25 0;
#X connect 12 0 11 0;
#X connect 13 0 12 1;
#X connect 14 0 12 0;
#X connect 15 0 17 1;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 19 0 35 0;
#X connect 20 0 30 0;
#X connect 20 0 30 1;
#X connect 21 0 20 1;
#X connect 22 0 21 0;
#X connect 23 0 22 0;
#X connect 24 0 10 0;
#X connect 25 0 24 0;
#X connect 26 0 9 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 28 1 25 1;
#X connect 29 0 26 1;
#X connect 31 0 10 0;
#X connect 32 0 35 0;
#X connect 32 1 35 1;
#X connect 33 0 34 0;
#X connect 34 0 32 0;
#X connect 35 0 11 1;
#X connect 36 0 40 0;
#X connect 36 0 40 1;
#X connect 37 0 36 1;
#X connect 38 0 37 0;
#X connect 39 0 38 0;
#X connect 41 0 20 0;
#X connect 42 0 36 0;
